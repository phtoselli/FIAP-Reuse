<<<<<<< HEAD
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

=======
>>>>>>> 864a5468cf34c0ade672fbdb3bf39ca09be1bddb
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
=======
generator client {
  provider = "prisma-client-js"
  output   = "/app/generated/prisma-client"
}

>>>>>>> 864a5468cf34c0ade672fbdb3bf39ca09be1bddb
model User {
  id                 String      @id @default(uuid())
  email              String      @unique
  avatarUrl          String?     @map("avatar_url")
  name               String
  createdAt          DateTime    @default(now()) @map("created_at")
  passwordHash       String      @map("password_hash")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  city               String?
  state              String?
  Address            Address[]
  posts              Post[]
  proposalsRequested Proposal[]  @relation("UserProposalsRequested")
  proposalsReceived  Proposal[]  @relation("UserProposalsReceived")
  tradesRequested    Trade[]     @relation("UserTradesRequested")
  tradesReceived     Trade[]     @relation("UserTradesReceived")
  tradeItems         TradeItem[]
}

model Type {
  id             String  @id @default(uuid())
  code           String
  type           String
  description    String?
  postsCondition Post[]  @relation("PostCondition")
  tradesStatus   Trade[] @relation("TradeStatus")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  posts         Post[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  categoryId  String   @map("category_id")
  posts       Post[]
  category    Category @relation(fields: [categoryId], references: [id])
}

model Post {
  id            String      @id @default(uuid())
  title         String
  description   String?
  imageUrl      String?     @map("image_url")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  userId        String
  categoryId    String
  subcategoryId String
  conditionId   String?
  rating        Float?      @default(0)
  category      Category    @relation(fields: [categoryId], references: [id])
  condition     Type?       @relation("PostCondition", fields: [conditionId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  tradeItems    TradeItem[]
}

model Trade {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  finalizedAt DateTime?   @map("finalized_at")
  requesterId String
  responderId String
  statusId    String?
  requester   User        @relation("UserTradesRequested", fields: [requesterId], references: [id])
  responder   User        @relation("UserTradesReceived", fields: [responderId], references: [id])
  status      Type?       @relation("TradeStatus", fields: [statusId], references: [id])
  tradeItems  TradeItem[]
}

model Proposal {
  id          String         @id @default(uuid())
  message     String?
  status      String         @default("pending")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  requesterId String
  responderId String
  requester   User           @relation("UserProposalsRequested", fields: [requesterId], references: [id])
  responder   User           @relation("UserProposalsReceived", fields: [responderId], references: [id])
  items       ProposalItem[]
}

model ProposalItem {
  id         String   @id @default(uuid())
  proposalId String
  postId     String
  proposal   Proposal @relation(fields: [proposalId], references: [id])
}

model TradeItem {
  id      String @id @default(uuid())
  tradeId String
  postId  String
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
  post    Post   @relation(fields: [postId], references: [id])
  trade   Trade  @relation(fields: [tradeId], references: [id])
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
