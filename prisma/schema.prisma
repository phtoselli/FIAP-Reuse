// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "/app/generated/prisma-client"
}

//Finalidade: Armanezer as informações de login e dos perfis dos usuários
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  city         String?
  state        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  posts           Post[]
  tradesRequested Trade[]     @relation("UserTradesRequested")
  tradesReceived  Trade[]     @relation("UserTradesReceived")
  tradeItems      TradeItem[]

  Address Address[]

  Proposal Proposal[] @relation("UserProposalsRequested")
}

model Type {
  id          String  @id @default(uuid())
  code        String
  type        String
  description String?

  postsCondition Post[]  @relation("PostCondition")
  tradesStatus   Trade[] @relation("TradeStatus")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  subcategories Subcategory[]
  posts         Post[]
}

model Subcategory {
  id          String  @id @default(uuid())
  name        String
  description String?
  categoryId  String  @map("category_id")

  category Category @relation(fields: [categoryId], references: [id])
  posts    Post[]
}

//Finalidade: Cadastro de Produtos
model Post {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String?  @map("image_url")
  rating      Float?   @default(0) //
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  conditionId String?
  condition   Type?   @relation("PostCondition", fields: [conditionId], references: [id])

  tradeItems TradeItem[]
}

// Finalidade: Armazenar dados de troca e propostas já fechadas
model Trade {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  finalizedAt DateTime? @map("finalized_at")

  requesterId String
  requester   User   @relation("UserTradesRequested", fields: [requesterId], references: [id])

  responderId String
  responder   User   @relation("UserTradesReceived", fields: [responderId], references: [id])

  statusId String?
  status   Type?   @relation("TradeStatus", fields: [statusId], references: [id])

  tradeItems TradeItem[]
}

//Finalidade: Para trocas não finalizadas / Em andamento
model Proposal {
  id        String   @id @default(uuid())
  message   String?
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  requesterId String
  requester   User   @relation("UserProposalsRequested", fields: [requesterId], references: [id])

  responderId String

  items ProposalItem[]
}

//Finalidade: Armazenar os dados dos Itens a serem trocados
model ProposalItem {
  id         String   @id @default(uuid())
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])

  postId String
}

//Finalidade: Armazenar os dados dos itens de trocados
model TradeItem {
  id String @id @default(uuid())

  tradeId String
  trade   Trade  @relation(fields: [tradeId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
}

// Finalidade: Armazenar os endereços de envio ou entrega dos usuários
model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
